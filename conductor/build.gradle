buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.mobilej.unmock:UnMockPlugin:0.6.5'
    }
}

apply plugin: 'com.novoda.bintray-release'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'de.mobilej.unmock'

def libVersionCode = Integer.parseInt(project.VERSION_CODE)
def libVersionName = project.VERSION_NAME

publish {
    userOrg = 'furiousseraphim'
    repoName = 'Conductor'
    groupId = 'com.furiousseraphim.conductor'
    artifactId = 'conductor'
    publishVersion = libVersionName
    desc = 'A small, yet full-featured framework that allows building View-based Android applications'
    website = 'https://github.com/FuriousSeraphim/Conductor'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode libVersionCode
        versionName libVersionName
        consumerProguardFiles 'proguard-rules.txt'
    }

    testOptions.unitTests.includeAndroidResources = true
}

configurations {
    lintChecks
}

dependencies {
    testImplementation rootProject.ext.junit
    testImplementation rootProject.ext.roboelectric

    api rootProject.ext.androidxAnnotations
    implementation rootProject.ext.androidxAppCompat
    implementation rootProject.ext.kotlinStd

    lintChecks project(path: ':conductor-lint', configuration: 'lintChecks')
}

task copyLintJar(type: Copy) {
    from(configurations.lintChecks) {
        rename { 'lint.jar' }
    }
    into 'build/intermediates/lint/'
}

project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}

apply from: rootProject.file('dependencies.gradle')
